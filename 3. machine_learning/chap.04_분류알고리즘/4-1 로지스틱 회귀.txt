4-1 로지스틱 회귀

로지스틱 회쉬 알고리즘과 이진 분류에서 클래스 확률을 예측.

럭키백 판매 이벤트
럭키백은 구성품을 모르는 상태에서 선구매 후, 구성품을 알 수 있는 상품.
기간 한정 판매 상품으로 구성품은 생선으로 한정.

고객 만족 팀의 반내로
마케팅 팀은 럭키백에 포함된 생선의 확률을 알려주는 방향으로 수정.


1. 럭키백의 확률 
럭키백에 들어가는 생서늬 종류느 7가지.
생선의 크기, 무게 등이 주어졌을 때 7가지 생선에 대한 확률을 예측.
특성 : 길이, 높이, 두께 외에 대갓건 길이, 무게도 사용.


k-최근접 이웃 분류기를 사용
특정 샘플에 대하여 이웃한 샘플의 갯수가 10개라고 가정했을 때,

이웃한 샘플이
사각형 3개
삼각형 5개
원 2개 라고 한다면..

확률은 
사각형 3개 : 3/10 => 0.3 => 30%
삼각형 5개 : 5/10 => 0.5 => 50%
원 2개  : 2/10 => 0.2 => 20%


데이터 준비 : 
Pandas의 read_csv()를 이용하여 읽은 후, 초기 5행만 샘플만 출력.

import pandas as pd

fish = pd.read_csv('https://bit.ly/fish_csv_data')

fish.head()


어떤 종류(고유)의 생선이 존재하는 지 확인 : Pandas의 unique()
print(pd.unique(fish['Species']))


데이터프레임에서 Species 열을 타깃(정답:클래스)으로 사용.

나머지 5개 열을 입력 데이터을 추출하여
넘파이 배열로 변환.

fish_input = fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()
print(fish_input[:5])



훈련 세트와 테스트 세트로 분리.
from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(
    fish_input, fish_target, random_state=42)



사이킷런의 StandardScalra 를 이용하여 훈련 세트와 테스트 세트를 표준화 처리.
from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(train_input)
train_scaled = ss.transform(train_input)
test_scaled = ss.transform(test_input)



k-최근접 이웃 분류기의 확률 예측

from sklearn.neighbors import KNeighborsClassifier

kn = KNeighborsClassifier(n_neighbors=3)
kn.fit(train_scaled, train_target)

print(kn.score(train_scaled, train_target))
print(kn.score(test_scaled, test_target))



다중 분류(multi-class classification) : 타깃 데이터에 2 개 이상의 클래스가 포함됨 문제

이진 분류에서는 1, 0으로 지정하여 타깃 데이터를 만들었지만,
다중 분류에서는 타깃값을 숫자오 변겨하여 입력할 수도 있고,
문자열로 된 타깃값을 그대로 사용 가능.
단, 타깃값이 사이킷런 모델에 그대로 전달되면 자동으로 알파벳순으로 정렬된다.
즉 데이터 프레임의 열의 순서와 다를 수도 있다!!!

사이킷런 모델
print(kn.classes_)
['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']

데이터 프레임 열
print(pd.unique(fish['Species']))
['Bream' 'Roach' 'Whitefish' 'Parkki' 'Perch' 'Pike' 'Smelt']


모델 예측
print(kn.predict(test_scaled[:5]))
['Perch' 'Smelt' 'Pike' 'Perch' 'Perch']


모델 예측 결과 확률 확인
import numpy as np

proba = kn.predict_proba(test_scaled[:5])
print(np.round(proba, decimals=4))
[[0.     0.     1.     0.     0.     0.     0.    ]
 [0.     0.     0.     0.     0.     1.     0.    ]
 [0.     0.     0.     1.     0.     0.     0.    ]
 [0.     0.     0.6667 0.     0.3333 0.     0.    ]
 [0.     0.     0.6667 0.     0.3333 0.     0.    ]]

=>
['Bream' 'Parkki' 'Perch' 'Pike' 'Roach' 'Smelt' 'Whitefish']


모델이 계산한 확률이 가장 가까운 이웃의 비율이 맞는 지 확인.
네 번재 샘플의 최근접 이웃클래스를 확인.
distances, indexes = kn.kneighbors(test_scaled[3:4])
print(train_target[indexes])
[['Roach' 'Perch' 'Perch']]

Roach 일 확률은 1/3=>0.3333
Perch 일 확률은 12/3=>0.6667







