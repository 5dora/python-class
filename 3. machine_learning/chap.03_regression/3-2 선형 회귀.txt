3-2 선형 회귀

문제 : 길이가 50cm인 농어로 무게 예측.
=> 저울에 나온 농어의 무게아 차이가 큼


k-최근접 이웃 회귀의 한계
=> 가장 가까운 샘플을 찾아 타깃을 평균.
> 따라서 새로운ㄴ 샘플이 훈련 세트의 범위가 벗어나면 엉뚱한 값을 예측할 수도 있다.

테스트

데이터 준비
import numpy as np

perch_length = np.array(
    [8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 
     21.0, 21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 
     22.5, 22.7, 23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 
     27.3, 27.5, 27.5, 27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 
     36.5, 36.0, 37.0, 37.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 
     40.0, 42.0, 43.0, 43.0, 43.5, 44.0]
     )
perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 
     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 
     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 
     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 
     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 
     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 
     1000.0, 1000.0]
     )


from sklearn.model_selection import train_test_split

# 훈련 세트와 테스트 세트로 나눕니다
train_input, test_input, train_target, test_target = train_test_split(
    perch_length, perch_weight, random_state=42)

# 훈련 세트와 테스트 세트를 2차원 배열로 바꿉니다
train_input = train_input.reshape(-1, 1)
test_input = test_input.reshape(-1, 1)


회귀 모델 객체 생성 및 회귀 모델 훈련
from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor(n_neighbors=3)

# k-최근접 이웃 회귀 모델을 훈련합니다
knr.fit(train_input, train_target)


print(knr.predict([[50]]))
[1033.33333333]


산점도로 확인
import matplotlib.pyplot as plt

# 50cm 농어의 이웃을 구합니다
distances, indexes = knr.kneighbors([[50]])

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 훈련 세트 중에서 이웃 샘플만 다시 그립니다
plt.scatter(train_input[indexes], train_target[indexes], marker='D')

# 50cm 농어 데이터
plt.scatter(50, 1033, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()



이웃 샘플의 타깃 평균 구해 확인
print(np.mean(train_target[indexes]))
1033.3333333333333


길이가 100cm인 농어의 무게 예측
print(knr.predict([[100]]))
[1033.33333333]



산점ㄷ를 이용하ㅕ 다시 확인

# 100cm 농어의 이웃을 구합니다
distances, indexes = knr.kneighbors([[100]])

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 훈련 세트 중에서 이웃 샘플만 다시 그립니다
plt.scatter(train_input[indexes], train_target[indexes], marker='D')

# 100cm 농어 데이터
plt.scatter(100, 1033, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


해결방법 : 가장 큰 농어가 훈련 세트에 포함도도록 
훈련 세트 재작성하여 다시 훈련..

단점 : 기존 훈련 세트 범위를 벗어나는 새로운 크기가 발생할 때마다 재훈련이 필요





선형회귀(Linear Regression)
비교적 간단하고, 성능이 뛰어나 널리 사용되는 대표적인 회귀 알고리즘.
즉, 특성이 하나인 경우, 어떤 직선을 학습하는 알고리즘...

직선 : 기울기, 절편이 필요.
즉, y=a*x+b
x : 농어의 길이
y : 농어의 무게
a : 기울기 (선형회귀모델의 coef_)
b : 절편 (선형회귀모델의 intercept_)

따라서, 농어 무게 = a*농어길이+b

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

# 선형 회귀 모델 훈련
lr.fit(train_input, train_target)

# 50cm 농어에 대한 예측
print(lr.predict([[50]]))
[1241.83860323]


print(lr.coef_, lr.intercept_)
[39.01714496] -709.0186449535477


농어의 길이 15~50까지 직선그리기
(15, 15*39-709)
(50, 50*39-709)

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 15에서 50까지 1차 방정식 그래프를 그립니다
plt.plot([15, 50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])

# 50cm 농어 데이터
plt.scatter(50, 1241.8, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()



훈련 세트와 테스트 세트 점수 확인 : score()
print(lr.score(train_input, train_target))
print(lr.score(test_input, test_target))



문제발생 :
1. 각 평가 점수가 그리 높지 않다. (즉, 전체적으로 과소적합 일 수 있다.)
2. 농어 길이와 무게에 대한 산점도를 보면 직성보다는 곡선에 가깝다.

따라서 최적의 직성보다는 최적의 곡선이 나을 듯....



다항 회귀

2차 방정식의 그래프를 그릴 경우,
길이를 제곱한 항이 훈련데이터에 포함되어 있어야 한다.
따라서 넘파이를 이용하여 길이를 제곱한 데이터를 원래데이터 앞에 추가.

train_poly = np.column_stack((train_input ** 2, train_input))
test_poly = np.column_stack((test_input ** 2, test_input))

print(train_poly.shape, test_poly.shape)
(42, 2) (14, 2)


주목 : 2차 방정식 그래프를 그리기 위해 훈련 세트에 제곱값을 추가 했지만,
타깃 값은 그대로 사용 한다는 점!!!

lr = LinearRegression()
lr.fit(train_poly, train_target)

print(lr.predict([[50**2, 50]]))
[1573.98423528]


print(lr.coef_, lr.intercept_)
1.01433211 -21.55792498] 116.0502107827827


시각화

# 구간별 직선을 그리기 위해 15에서 49까지 정수 배열을 만듭니다
point = np.arange(15, 50)

# 훈련 세트의 산점도를 그립니다
plt.scatter(train_input, train_target)

# 15에서 49까지 2차 방정식 그래프를 그립니다
plt.plot(point, 1.01*point**2 - 21.6*point + 116.05)

# 50cm 농어 데이터
plt.scatter([50], [1574], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()



훈련 세트와 테스트 세트 점수 확인
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target))
0.9706807451768623
0.9775935108325122





